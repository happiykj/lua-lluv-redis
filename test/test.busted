io.stdout:setvbuf'no';io.stderr:setvbuf'no';
package.path = "..\\src\\lua\\?.lua;" .. package.path

local prequire = function(m)
  local ok, m = pcall(require, m)
  if ok then return m end
end

local uv    = require "lluv"
local loop  = require "lluv.busted.loop"
local Redis = require "lluv.redis"
local stp   = prequire"StackTracePlus"

local URL = "redis://127.0.0.1/12"

setloop(loop)

loop.set_timeout(5)

loop.set_traceback(stp and stp.stacktrace or debug.traceback)

describe('lluv.Redis test', function()
  local redis

  local ENOTCONN = uv.error('LIBUV', uv.ENOTCONN)

  describe('Basic commands test', function()
    it('basic ping', function(done) async()
      redis:ping(function(self, err, res)
        assert.equal(redis, self) assert.is_nil(err)
        assert.equal('PONG', res)
        done()
      end)
    end)

    it('basic echo', function(done) async()
      redis:echo('hello world', function(self, err, res)
        assert.equal(redis, self) assert.is_nil(err)
        assert.equal('hello world', res)
        done()
      end)
    end)

    it('Lua echo', function(done) async()
      redis:eval("return ARGV", "0", {'hello', 'world'}, function(self, err, res)
        assert.equal(redis, self) assert.is_nil(err)
        assert.same({'hello', 'world', n = 2}, res)
        done()
      end)
    end)

    it('should return error if connection not opened', function(done) async()
      redis:close(function()
        redis:on('error', function()
          assert.truthy(false, 'Should not be called')
        end)

        assert.no_error(function() redis:ping() end)
        assert.no_error(function() redis:echo('hello') end)

        redis:ping(function(self, err)
          assert.equal(redis, self)
          assert.equal(ENOTCONN, err)
          redis:off('error')
          done()
        end)
      end)
    end)

    it('should not close/error emit in case of error in command', function(done) async()
      redis:on('close', function(self, event, err)
        assert.truthy(false, 'Should not be called')
      end)

      redis:on('error', function(self, event, err)
        assert.truthy(false, 'Should not be called')
      end)

      local called
      redis:evalsha(function(self, err)
        called = true
        assert.not_nil(err)
        assert.equal('REDIS', err:cat())
        assert.equal('ERR',   err:name())
      end)

      uv.timer():start(500, function()
        redis:off('close')
        assert.truthy(called)
        done()
      end)
    end)

    it('Fail create connection with invalid scheme', function(done) async()
      local client
      assert.error(function()
        client = Redis.Connection.new{server = 'tcp://127.0.0.1'}
      end)
      if client then client:close() end
      done()
    end)

  end)

  describe('events test', function()
    local client

    local ECONNRESET = uv.error('LIBUV', uv.ECONNRESET)

    local function reset_connection(object, err)
      object._stream:halt(err or ECONNRESET)
    end

    it('should hit all events', function(done) async()
      local events = {}

      client = redis:clone()

      client:onAny(function(self, event, ...)
        events[#events + 1] = event
      end)

      client:open(function(_, err) assert_nil(err) end)

      uv.timer():start(500, function()
        assert.same({'open', 'ready'}, events)

        client:subscribe('hello', function(_, err) assert_nil(err)
          redis:publish('hello', 'world', function(_, err) assert_nil(err) end)
        end)

        uv.timer():start(500, function()
          assert.same({'open', 'ready', 'subscribe', 'message'}, events)
          client:close(function()  end)

          uv.timer():start(500, function()
            assert.same({'open', 'ready', 'subscribe', 'message', 'close'}, events)
            done()
          end)
        end)
      end)
    end)

    it('should hit error event', function(done) async()
      local events = {}

      client = redis:clone()

      client:onAny(function(self, event, ...)
        events[#events + 1] = {event, ...}
      end)

      client:open(function(_, err) assert_nil(err) end)

      uv.timer():start(500, function()
        assert.same({{'open'}, {'ready'}}, events)

        reset_connection(client)

        uv.timer():start(500, function()
          assert.same({{'open'}, {'ready'}, {'error', ECONNRESET}, {'close', ECONNRESET}}, events)
          assert.is_true(client:closed())
          done()
        end)
      end)
    end)

    it('close event should pass error', function(done) async()
      local c1, c2

      redis:on('close', function(self, event, err)
        assert.equal(ECONNRESET, err)
        c1 = true
      end)

      redis:on('error', function(self, event, err)
        assert.equal(ECONNRESET, err)
        assert.falsy(c1)
        c2 = true
      end)

      reset_connection(redis)

      uv.timer():start(500, function()
        assert.truthy(c1)
        assert.truthy(c2)
        redis:removeAllListeners()
        done()
      end)
    end)

    it('close event should not pass error', function(done) async()
      local c1, c2

      redis:on('close', function(self, event, err)
        assert_nil(err)
        c1 = true
      end)

      redis:on('error', function(self, event, err)
        assert.truthy(false, 'Shold not be called')
      end)

      redis:close(function(self, err)
        assert_nil(err)
        c2 = true
      end)

      uv.timer():start(500, function()
        assert.truthy(c1)
        assert.truthy(c2)
        redis:removeAllListeners()
        done()
      end)
    end)

    it('close with error should not raise error event', function(done) async()
      local c1, c2

      redis:on('close', function(self, event, err)
        assert.equal(ECONNRESET, err)
        c1 = true
      end)

      redis:on('error', function(self, event, err)
        assert.truthy(false, 'Shold not be called')
      end)

      redis:close(ECONNRESET, function(self, err)
        assert.equal(ECONNRESET, err)
        c2 = true
      end)

      uv.timer():start(500, function()
        assert.truthy(c1)
        assert.truthy(c2)
        redis:removeAllListeners()
        done()
      end)
    end)

    it('should hit pmessage events', function(done) async()
      client = redis:clone()

      local c1, c2

      client:on('pmessage', function(self, event, pattern, channel, data)
        c1 = true
        assert.equal('a*',    pattern)
        assert.equal('a123',  channel)
        assert.equal('hello', data   )
      end)

      client:on('psubscribe', function(self, event, pattern)
        c2 = true
        assert.equal('a*', pattern)
      end)

      client:open(function(_, err) assert_nil(err)
        client:psubscribe('a*', function(_, err) assert_nil(err)
          redis:publish('a123', 'hello',function(_, err) assert_nil(err) end)
          uv.timer():start(500, function()
            assert.truthy(c1)
            assert.truthy(c2)
            done()
          end)
        end)
      end)
    end)

    after_each(function(done) async()
      if client then
        client:close(function() done() end)
        client = nil
      else
        done(ctx)
      end
    end)
  end)

  before_each(function(done) async()
    redis = Redis.Connection.new{server = URL}
    redis:open(function(self, err) assert.is_nil(err)
      redis:flushdb(function(self, err)  assert.is_nil(err)
        self:script_flush(function(self, err) assert.is_nil(err)
          done()
        end)
      end)
    end)
  end)

  after_each(function(done) async()
    if redis then
      redis:close(function()
        loop.verify_after()
        done(ctx)
      end)
      redis = nil
    else
      done(ctx)
    end
  end)

end)

local RedisStream = require "lluv.redis.stream"

assert:add_formatter(function(t)
  if type(t) ~= 'table' then return end

  if getmetatable(t) == Redis.Connection then
    return tostring(t)
  end

  if RedisStream.IsError(t) then
    return tostring(t)
  end

end)

assert_nil = assert.is_nil
